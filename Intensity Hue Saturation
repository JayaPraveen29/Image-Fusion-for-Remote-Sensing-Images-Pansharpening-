import numpy as np
from osgeo import gdal
import os
from skimage import exposure
from scipy import ndimage

def read_image(file_path):
    """Read image using GDAL."""
    if not os.path.exists(file_path):
        raise FileNotFoundError(f"The file {file_path} does not exist.")

    dataset = gdal.Open(file_path)
    if dataset is None:
        raise IOError(f"GDAL failed to open the file {file_path}.")

    bands = [dataset.GetRasterBand(i + 1).ReadAsArray().astype(np.float32)
            for i in range(dataset.RasterCount)]
    array = np.stack(bands, axis=0) if len(bands) > 1 else bands[0]
    return array, dataset

def write_image(file_path, array, dataset):
    """Write image using GDAL."""
    driver = gdal.GetDriverByName("GTiff")

    if not file_path.endswith('.tif'):
        file_path += '.tif'

    if array.ndim == 2:
        array = array[np.newaxis, ...]

    array = np.clip(array, 0, 65535)  # Assuming 16-bit image

    out_dataset = driver.Create(file_path, array.shape[2], array.shape[1],
                              array.shape[0], gdal.GDT_Float32)
    out_dataset.SetGeoTransform(dataset.GetGeoTransform())
    out_dataset.SetProjection(dataset.GetProjection())

    for i in range(array.shape[0]):
        out_band = out_dataset.GetRasterBand(i + 1)
        out_band.WriteArray(array[i])
        out_band.FlushCache()

def normalize_image(image):
    """Normalize image to 0-1 range."""
    min_val = np.min(image)
    max_val = np.max(image)
    if max_val - min_val == 0:
        return image
    return (image - min_val) / (max_val - min_val)

def rgb_to_ihs(rgb_image):
    """
    Convert RGB image to IHS (Intensity, Hue, Saturation) color space.

    Parameters:
    -----------
    rgb_image : ndarray
        RGB image with shape (3, height, width)

    Returns:
    --------
    tuple
        (intensity, hue, saturation) arrays
    """
    # Normalize RGB values to [0, 1]
    rgb_norm = np.zeros_like(rgb_image, dtype=np.float32)
    for i in range(3):
        rgb_norm[i] = normalize_image(rgb_image[i])

    R, G, B = rgb_norm[0], rgb_norm[1], rgb_norm[2]

    # Calculate Intensity
    I = (R + G + B) / 3.0

    # Calculate Saturation
    min_rgb = np.minimum(np.minimum(R, G), B)
    S = 1 - 3 * min_rgb / (R + G + B + 1e-10)
    S = np.clip(S, 0, 1)

    # Calculate Hue
    num = 0.5 * ((R - G) + (R - B))
    den = np.sqrt((R - G)**2 + (R - B)*(G - B) + 1e-10)
    theta = np.arccos(np.clip(num/den, -1.0, 1.0))
    H = theta.copy()
    H[B > G] = 2*np.pi - H[B > G]
    H = H/(2*np.pi)

    return I, H, S

def ihs_to_rgb(I, H, S):
    """
    Convert IHS (Intensity, Hue, Saturation) to RGB color space.

    Parameters:
    -----------
    I : ndarray
        Intensity component
    H : ndarray
        Hue component
    S : ndarray
        Saturation component

    Returns:
    --------
    ndarray
        RGB image with shape (3, height, width)
    """
    # Convert hue to radians
    H = H * 2 * np.pi

    # IHS to RGB conversion
    R = np.zeros_like(I)
    G = np.zeros_like(I)
    B = np.zeros_like(I)

    # First sector (0° to 120°)
    idx = (H >= 0) & (H < 2*np.pi/3)
    B[idx] = I[idx] * (1 - S[idx])
    R[idx] = I[idx] * (1 + (S[idx] * np.cos(H[idx])/np.cos(np.pi/3 - H[idx])))
    G[idx] = 3*I[idx] - (R[idx] + B[idx])

    # Second sector (120° to 240°)
    idx = (H >= 2*np.pi/3) & (H < 4*np.pi/3)
    H2 = H - 2*np.pi/3
    R[idx] = I[idx] * (1 - S[idx])
    G[idx] = I[idx] * (1 + (S[idx] * np.cos(H2[idx])/np.cos(np.pi/3 - H2[idx])))
    B[idx] = 3*I[idx] - (R[idx] + G[idx])

    # Third sector (240° to 360°)
    idx = (H >= 4*np.pi/3) & (H <= 2*np.pi)
    H3 = H - 4*np.pi/3
    G[idx] = I[idx] * (1 - S[idx])
    B[idx] = I[idx] * (1 + (S[idx] * np.cos(H3[idx])/np.cos(np.pi/3 - H3[idx])))
    R[idx] = 3*I[idx] - (G[idx] + B[idx])

    # Stack bands and ensure valid range
    rgb = np.stack([R, G, B])
    rgb = np.clip(rgb, 0, 1)

    return rgb

def ihs_fusion(ms_image, pan_image, histogram_match=True):
    """
    Perform IHS fusion between multispectral and panchromatic images.

    Parameters:
    -----------
    ms_image : ndarray
        Multispectral image with shape (bands, height, width)
    pan_image : ndarray
        Panchromatic image with shape (height, width)
    histogram_match : bool
        Whether to apply histogram matching between pan and intensity

    Returns:
    --------
    ndarray
        Fused image with shape (bands, height, width)
    """
    # Normalize panchromatic image
    pan_norm = normalize_image(pan_image)

    # Convert MS image to IHS
    I, H, S = rgb_to_ihs(ms_image[:3])  # Use first 3 bands

    # Histogram matching between pan and intensity if requested
    if histogram_match:
        # Calculate cumulative distribution functions
        pan_hist, pan_bins = np.histogram(pan_norm.flatten(), bins=1000, density=True)
        pan_cdf = np.cumsum(pan_hist * np.diff(pan_bins))

        I_hist, I_bins = np.histogram(I.flatten(), bins=1000, density=True)
        I_cdf = np.cumsum(I_hist * np.diff(I_bins))

        # Interpolate pan values to match intensity histogram
        pan_norm = np.interp(pan_norm.flatten(), pan_bins[:-1], pan_cdf)
        pan_norm = np.interp(pan_norm, I_cdf, I_bins[:-1])
        pan_norm = pan_norm.reshape(pan_image.shape)

    # Replace intensity with pan
    I_new = pan_norm

    # Convert back to RGB
    fused_rgb = ihs_to_rgb(I_new, H, S)

    # Create output array with same number of bands as input
    fused_image = np.zeros_like(ms_image)
    fused_image[:3] = fused_rgb  # Replace first 3 bands
    if ms_image.shape[0] > 3:
        fused_image[3:] = ms_image[3:]  # Keep other bands unchanged

    return fused_image

def resample_image(dataset, width, height):
    """Resample an image using cubic interpolation."""
    temp_ds = gdal.Warp('', dataset, format='MEM', width=width, height=height,
                       resampleAlg=gdal.GRA_Cubic)
    resampled_image = np.zeros((dataset.RasterCount, height, width), dtype=np.float32)

    for i in range(dataset.RasterCount):
        band_data = temp_ds.GetRasterBand(i + 1).ReadAsArray()
        resampled_image[i] = normalize_image(band_data)

    return resampled_image

def main(ms_file, pan_file, output_file):
    try:
        # Read images
        ms_array, ms_dataset = read_image(ms_file)
        pan_array, pan_dataset = read_image(pan_file)
        print(f"Read images - MS shape: {ms_array.shape}, PAN shape: {pan_array.shape}")

        # Ensure pan_array is 2D
        if pan_array.ndim == 3:
            pan_array = pan_array[0]

        # Normalize input images
        ms_array = np.clip(ms_array, 0, None)  # Remove negative values
        pan_array = np.clip(pan_array, 0, None)

        # Resample multispectral image
        ms_resampled = resample_image(ms_dataset, pan_array.shape[1], pan_array.shape[0])
        print(f"Resampled MS image shape: {ms_resampled.shape}")

        # Perform IHS fusion
        fused_image = ihs_fusion(ms_resampled, pan_array, histogram_match=True)
        print("Performed IHS fusion")

        # Write fused image
        write_image(output_file, fused_image, pan_dataset)
        print(f"Successfully wrote fused image to {output_file}")

    except Exception as e:
        print(f"An error occurred: {str(e)}")
        raise

if __name__ == "__main__":
    ms_file = "/content/drive/MyDrive/New_fusion/Old_original_data/Kanigiri.tif"
    pan_file = "/content/drive/MyDrive/New_fusion/Old_original_data/Kanigiri_PAN.tif"
    output_file = "/content/drive/MyDrive/New_fusion/IHS_FUSED_image.tif"
    main(ms_file, pan_file, output_file)
