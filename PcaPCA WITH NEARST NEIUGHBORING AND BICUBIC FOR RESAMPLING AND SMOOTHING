!pip install PyWavelets


import numpy as np
from osgeo import gdal
import os
from skimage import exposure
from sklearn.decomposition import PCA

def read_image(file_path):
    if not os.path.exists(file_path):
        raise FileNotFoundError(f"The file {file_path} does not exist.")

    dataset = gdal.Open(file_path)
    if dataset is None:
        raise IOError(f"GDAL failed to open the file {file_path}. Please check if the file is accessible and in a format supported by GDAL.")

    bands = [dataset.GetRasterBand(i + 1).ReadAsArray() for i in range(dataset.RasterCount)]
    array = np.stack(bands, axis=0) if len(bands) > 1 else bands[0]
    return array, dataset

def write_image(file_path, array, dataset):
    driver = gdal.GetDriverByName("GTiff")

    if not file_path.endswith('.tif'):
        file_path += '.tif'

    if array.ndim == 2:
        array = array[np.newaxis, ...]

    out_dataset = driver.Create(file_path, array.shape[2], array.shape[1], array.shape[0], gdal.GDT_Float32)
    out_dataset.SetGeoTransform(dataset.GetGeoTransform())
    out_dataset.SetProjection(dataset.GetProjection())

    for i in range(array.shape[0]):
        out_band = out_dataset.GetRasterBand(i + 1)
        out_band.WriteArray(array[i])
        out_band.FlushCache()

def pca_fusion(ms_image, pan_image):
    """Perform PCA-based image fusion."""
    # Reshape multispectral image for PCA (bands as features)
    height, width = ms_image.shape[1], ms_image.shape[2]
    ms_image_reshaped = ms_image.reshape(ms_image.shape[0], -1).T  # Shape: (n_pixels, n_bands)

    # Apply PCA on the multispectral image
    pca = PCA(n_components=ms_image.shape[0])
    pca_components = pca.fit_transform(ms_image_reshaped)  # Shape: (n_pixels, n_bands)

    # Replace the first principal component with the high-resolution panchromatic image
    pca_components[:, 0] = pan_image.flatten()

    # Inverse PCA to reconstruct the fused image
    fused_image_reshaped = pca.inverse_transform(pca_components)  # Shape: (n_pixels, n_bands)
    fused_image = fused_image_reshaped.T.reshape(ms_image.shape)  # Shape: (n_bands, height, width)

    return fused_image

def histogram_match(source, reference):
    """Match the histogram of the source image to that of the reference image."""
    matched = exposure.match_histograms(source, reference)
    return matched

def resample_image(dataset, width, height, resample_alg=gdal.GRA_NearestNeighbour):
    """Resample an image using the specified algorithm."""
    temp_ds = gdal.Warp('', dataset, format='MEM', width=width, height=height, resampleAlg=resample_alg)
    resampled_image = np.zeros((dataset.RasterCount, height, width), dtype=np.float32)

    for i in range(dataset.RasterCount):
        resampled_image[i] = temp_ds.GetRasterBand(i + 1).ReadAsArray()

    return resampled_image

def main(ms_file, pan_file, output_file):
    try:
        # Read multispectral image
        ms_array, ms_dataset = read_image(ms_file)
        print(f"Successfully read multispectral image. Shape: {ms_array.shape}")

        # Read panchromatic image
        pan_array, pan_dataset = read_image(pan_file)
        print(f"Successfully read panchromatic image. Shape: {pan_array.shape}")

        # Ensure pan_array is 2D
        if pan_array.ndim == 3:
            pan_array = pan_array[0]
            print("Converted panchromatic image to 2D.")

        # First, use nearest neighbor resampling for the multispectral image
        ms_resampled_nearest = resample_image(ms_dataset, pan_array.shape[1], pan_array.shape[0], resample_alg=gdal.GRA_NearestNeighbour)
        print(f"Resampled multispectral image using nearest neighbor. New shape: {ms_resampled_nearest.shape}")

        # Then, apply bicubic resampling for smoothing
        ms_resampled_bicubic = resample_image(ms_dataset, pan_array.shape[1], pan_array.shape[0], resample_alg=gdal.GRA_Cubic)
        print(f"Resampled multispectral image using bicubic for smoothing. New shape: {ms_resampled_bicubic.shape}")

        # Perform PCA-based fusion with bicubic-smoothed image
        fused_image = pca_fusion(ms_resampled_bicubic, pan_array)
        print("Performed PCA-based fusion.")

        # Apply Histogram Matching for each band to match the panchromatic image's details
        for i in range(fused_image.shape[0]):
            fused_image[i] = histogram_match(fused_image[i], pan_array)
        print("Applied histogram matching to enhance details.")

        # Write fused image with high resolution as a TIFF file
        write_image(output_file, fused_image, pan_dataset)
        print(f"Successfully wrote fused image to {output_file}.tif")

    except Exception as e:
        print(f"An error occurred: {str(e)}")


if __name__ == "__main__":
    ms_file = "/content/drive/MyDrive/Kanigiri.tif"
    pan_file = "/content/drive/MyDrive/Kanigiri_PAN.tif"
    output_file = "/content/drive/MyDrive/PCA_fused_image_WITH_NN_AND_BICUBIC.tif"
    main(ms_file, pan_file, output_file)

